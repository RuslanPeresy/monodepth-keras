import numpy as np
import tensorflow as tf
import argparse

# custom modules

# loss
# utils

def return_arguments():
    parser = argparse.ArgumentParser(description='Monodepth Keras Implementation')

    parser.add_argument('data_dir', help='path to the dataset folder')
    parser.add_argument('val_data_dir', help='path to the validation dataset folder')
    parser.add_argument('model_path', help='path to the trained model')
    parser.add_argument('output_directory', help='where save disparities for tested images')
    parser.add_argument('--input_height', type=int, help='input height', default=256)
    parser.add_argument('--input_width', type=int, help='input_width', default=512)
    parser.add_argument('--model', default='resnet18_md', help='encoder architecture\
                        (default: resnet18_md)')
    parser.add_argument('--mode', default='train', help='mode: train or test (default:train)')
    parser.add_argument('--epochs', default=50, help='number of total epoches to run')
    parser.add_argument('--learning_rate', default=1e-4, help='initual learning rate\
                        (default: 1e-4)')
    parser.add_argument('--batch_size', default=256, help='mini-batch size (default: 256')
    parser.add_argument('--adjust_lr', default=True, help='apply learning rate decay or not\
                        (default: True)')

    args = parser.parse_args()
    return args


def post_process_disparity(disp):
    (_, h, w) = disp.shape
    l_disp = disp[0, :, :]
    r_disp = np.fliplr(disp[1, :, :])
    m_disp = 0.5 * (l_disp + r_disp)
    (l, _) = np.meshgrid(np.linspace(0, 1, w), np.linspace(0, 1, h))
    l_mask = 1.0 - np.clip(20 * (l - 0.05), 0, 1)
    r_mask = np.fliplr(l_mask)
    return r_mask * l_disp + l_mask * r_disp + (1.0 - l_mask - r_mask) * m_disp

